//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use async_graphql::{ComplexObject, Context, SimpleObject};
use sea_orm::entity::prelude::*;

use crate::{chef, Chef};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, SimpleObject)]
#[graphql(complex, name = "Bakery")]
#[sea_orm(table_name = "bakery")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    #[sea_orm(column_type = "Double")]
    pub profit_margin: f64,
}

#[ComplexObject]
impl Model {
    async fn chefs(&self, ctx: &Context<'_>) -> Result<Vec<chef::Model>, DbErr> {
        let db = ctx.data::<DatabaseConnection>().unwrap();

        self.find_related(Chef).all(db).await
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::chef::Entity")]
    Chef,
}

impl Related<super::chef::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Chef.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
